(defun null. (x)
  (eq x '()))

(defun and. (x y)
  (cond (x 
	 (cond (y 't)
	       ('t '())))
        ('t '())))

(defun or. (x y)
  (cond (x 't)
	(y 't)
	('t '())))

(defun plus1. (lst)
  (cond ((null. lst) (cons '1 '()))
	((eq (car lst) '1)
	 (cons '0 (plus1. (cdr lst))))
	('t (cons '1 (cdr lst)))))

(defun minus1. (lst)
  (cond ((null. lst) '())
	((and. (null. (cdr lst)) (eq (car lst) '1)) '())
	((eq (car lst) '0)
	 (cons '1 (minus1. (cdr lst))))
	((eq (car lst) '1) (cons '0 (cdr lst)))))

(defun +. (lst1 lst2)
  (cond ((null. lst2) lst1)
	('t (+. (plus1.   lst1) (minus1. lst2)))))

(defun -. (lst1 lst2)
  (cond ((null. lst2) lst1)
	('t (-. (minus1. lst1) (minus1. lst2)))))

(defun ash+. (lst1 lst2)
  (cond ((null. lst2) lst1)
	('t (ash+. (cons '0 lst1) (minus1. lst2)))))

(defun >. (lst1 lst2)
  (cond ((and. (null. lst2) (null. lst1)) '())
	((null. lst2) 't)
	((null. lst1) '())
	('t (>. (minus1. lst1) (minus1. lst2)))))

(defun eqnum. (lst1 lst2)
  (cond ((and. (null. lst1) (null. lst2)) 't)
	((eq (car lst1) (car lst2))
	 (eqnum. (cdr lst1) (cdr lst2)))
	('t '())))

(defun fullness. (tree size)
  (cond ((null. size)
	 '(1))
	((null. (cdr tree))
	     (fullness. (car tree) (minus1. size)))
	('t (+. (ash+. '(1) (minus1. size))  (fullness. (cdr tree) (minus1. size))))))

(defun length. (trl size)
  (cond ((null. trl) '())
	((or. (null. (cdr trl))
	     (eq 'sen2 (cdr trl)))
	 (minus1. (+. (ash+. '(1) size)
		     (+. (fullness. (car trl) size)
			 (cond ((eq '() (cdr trl))
				'())
			       ('t '(1)))))))
	('t (length. (cdr trl) (plus1. size)))))

(defun tree-nth. (number tree size)
  (cond ((null. size)
	 tree)
	((>. (ash+. '(1) (minus1. size)) number)
	 (tree-nth. number (car tree) (minus1. size)))
	('t (tree-nth. (-. number (ash+. '(1) (minus1. size))) (cdr tree) (minus1. size)))))

(defun t-nth. (x trl size)
  (cond ((>. (minus1. (ash+. '(0 1) size)) x)
	 (tree-nth. (-. x (minus1. (ash+. '(1) size))) (car trl) size))
	('t (t-nth. x (cdr trl) (plus1. size)))))

(defun tree-add. (elt tree size number)
  (cond ((null. size)
	 elt)
	((>. (ash+. '(1) (minus1. size)) number)
	 (cons (tree-add. elt (car tree) (minus1. size) number) '()))
	('t (cons (car tree) (tree-add. elt (cdr tree) (minus1. size) (-. number (ash+. '(1) (minus1. size))))))))

(defun sentinel-change. (trl)
  (cond ((null. (cdr trl))
	 (cons (car trl) 'sen2))
	('t (cons (car trl) (sentinel-change. (cdr trl))))))

(defun t-add. (elt trl size number)
  (cond ((eq 'sen2 trl)
	 (cons (tree-add. elt '() size '()) '()))
	((and. (eq '0 (car number)) (null. elt))
	 (sentinel-change. trl))
	((>. (-. (ash+. '(0 1) size) '(1)) number)
	 (cons (tree-add. elt (car trl) size (-. number (-. (ash+. '(1) size) '(1)))) '()))
	('t (cons (car trl) (t-add. elt (cdr trl) (plus1. size) number)))))

(defun assoc. (atom a x)
  (cond ((eq atom (car (t-nth. x a '())))
	 (cdr (t-nth. x a '())))
	('t (assoc. atom a (minus1. x)))))

(defun append. (trl1 trl2 x)
  (cond ((eqnum. x (length. trl2 '()))
	 trl1)
	('t (append. (t-add. (t-nth. x trl2 '()) trl1 '() (length. trl1 '())) trl2 (plus1. x)))))

(defun pair. (trl1 trl2 trl3 x)
  (cond ((eqnum. x (length. trl2 '()))
	 trl1)
	('t (pair. (t-add. (cons (t-nth. x trl2 '()) (t-nth. x trl3 '())) trl1 '() (length. trl1 '())) 
		   trl2 trl3 (plus1. x)))))

(defun eval. (e a)
  (cond
    ((atom e) (assoc. e a (minus1. (length. a '()))))
    ((atom (car e))
     (cond
       ((eq (car e) 'quote) (caadr e))
       ((eq (car e) 'atom)  (atom   (eval. (caadr e) a)))
       ((eq (car e) 'eq)    (eq     (eval. (caadr e) a)  
                                    (eval. (cdadr e) a)))
       ((eq (car e) 'car)   (car    (eval. (caadr e) a)))
       ((eq (car e) 'cdr)   (cdr    (eval. (caadr e) a)))
       ((eq (car e) 'cons)  (cons   (eval. (caadr e) a)
                                    (eval. (cdadr e) a)))
       ((eq (car e) 'cond)  (evcon. (cdr e) a '()))
       ('t (eval. (cons (assoc. (car e) a (minus1. (length. a '())))
                        (cdr e)) a))))
    ((eq (caar e) 'label)
     (eval. (cons (cdadar e) (cdr e))
	    (t-add. (cons (caadar e) (car e)) a '() (length. a '()))))
    ((eq (caar e) 'lambda)
     (eval. (cdadar e)
            (append. a (pair. '() (caadar e) (evlis. (append. '() e '(1)) a '()) '()) '())))))

(defun evcon. (trl a x)
  (cond ((eval. (car (t-nth. x trl '())) a) (eval. (cdr (t-nth. x trl '())) a))
	('t (evcon. trl a (plus1. x)))))

(defun evlis. (trl a x)
  (cond ((eqnum. x (length. trl '()))
	 '())
	('t (append. (cons (eval. (t-nth. x trl '()) a) '()) (evlis. trl a (plus1. x)) '()))))